---
import { getCollection } from 'astro:content';

export interface Props {
  currentTags: string[];
  currentSlug: string;
  limit?: number;
}

const { currentTags, currentSlug, limit = 3 } = Astro.props;

// Get all blog posts
const allPosts = await getCollection('blog');

// Filter out current post and find related posts
const relatedPosts = allPosts
  .filter(post => 
    post.slug !== currentSlug && 
    post.data.tags && 
    post.data.tags.some(tag => currentTags.includes(tag))
  )
  .sort((postA, postB) => {
    // Calculate relevance score based on shared tags
    const aScore = postA.data.tags?.filter(tag => currentTags.includes(tag)).length || 0;
    const bScore = postB.data.tags?.filter(tag => currentTags.includes(tag)).length || 0;
    return bScore - aScore;
  })
  .slice(0, limit);

// If not enough related posts, fill with recent posts
if (relatedPosts.length < limit) {
  const recentPosts = allPosts
    .filter(post => post.slug !== currentSlug)
    .sort((postA, postB) => new Date(postB.data.pubDate).getTime() - new Date(postA.data.pubDate).getTime())
    .slice(0, limit - relatedPosts.length);
  
  relatedPosts.push(...recentPosts);
}
---

{relatedPosts.length > 0 && (
  <section class="related-posts">
    <h3>You might also like...</h3>
    <div class="related-posts-grid">
      {relatedPosts.map((post) => (
        <article class="related-post">
          <div class="related-post-content">
            <h4>
              <a href={post.slug}>{post.data.title}</a>
            </h4>
            <p class="related-post-meta">
              <span class="related-post-date">
                {new Date(post.data.pubDate).toLocaleDateString('en-US', { 
                  timeZone: 'America/Los_Angeles' 
                })}
              </span>
              <span class="related-post-read-time">{post.data.readTime || "5 min read"}</span>
            </p>
            <p class="related-post-description">{post.data.description}</p>
            {post.data.tags && (
              <div class="related-post-tags">
                {post.data.tags.slice(0, 3).map((tag) => (
                  <span class="related-post-tag">{tag}</span>
                ))}
              </div>
            )}
          </div>
        </article>
      ))}
    </div>
  </section>
)}

<style>
  .related-posts {
    margin: 3rem 0;
    padding: 2rem 0;
    border-top: 1px solid #e0e0e0;
  }

  .related-posts h3 {
    margin-bottom: 1.5rem;
    color: #2c3e50;
    font-size: 1.4rem;
    font-weight: 600;
  }

  .related-posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .related-post {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1.5rem;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .related-post:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }

  .related-post-content h4 {
    margin: 0 0 0.75rem 0;
    font-size: 1.1rem;
    line-height: 1.4;
  }

  .related-post-content h4 a {
    color: #2c3e50;
    text-decoration: none;
  }

  .related-post-content h4 a:hover {
    color: #007acc;
  }

  .related-post-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 0.75rem;
    font-size: 0.9rem;
  }

  .related-post-date {
    color: #7f8c8d;
    font-weight: 500;
  }

  .related-post-read-time {
    background: #e8f4fd;
    color: #007acc;
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .related-post-description {
    color: #555;
    line-height: 1.6;
    margin-bottom: 1rem;
    font-size: 0.95rem;
  }

  .related-post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .related-post-tag {
    background: #e8f4fd;
    color: #007acc;
    padding: 0.2rem 0.6rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  @media (max-width: 768px) {
    .related-posts-grid {
      grid-template-columns: 1fr;
    }
    
    .related-post {
      padding: 1rem;
    }
  }
</style>
