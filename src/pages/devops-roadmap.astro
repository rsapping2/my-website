---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout>
  <h1>DevOps Roadmap</h1>


  <section>
    <h2>Step 1: Programming Language</h2>
    <p>You don‚Äôt have to be a full-time dev, but you do need to automate and write scripts.</p>
    <h3>Basics</h3>
    <ul>
      <li>Learn a language (Python or Go are common).</li>
      <li>Shell scripting for Linux automation. (Bash)</li>
    </ul>
    <p><strong>Tip:</strong> Python is your best friend for writing infrastructure tools, automations, and scripts.</p>
  </section>

  <section>
    <h2>Step 2: Decide on an OS</h2>
    <p>At this point, you need to decide on an Operation systems to work with. Even if you are on windows, I recommend something more Linux based.</p>
    <h3>OS:</h3>
    <ul>
      <li>Linux: Ubuntu / Debian based</li>
      <li>Windows: Use WSL and Linux. You could use windows and powershell, but I don't recommend it.</li>
      <li>MacOs: Mac is built on top of Unix-based System called Darwin. </li>
    </ul>
    <p><strong>Recommendation:</strong> Anything Linux based is recommended. </p>
  </section>

  <section>
    <h2>Step 3: Scripting and editors</h2>
    <p> With your OS now picked out, you should be able to pick a scripting language. We should also learn a editor that can be used later on when accessing serverrs. </p>
    <h3>Scripting:</h3>
    <ul>
      <li>Linux: Bash</li>
      <li>Windows: Using WSL, bash, or power shell.</li>
      <li>MacOs: Bash </li>
    </ul>
    <p><strong>Recommendation:</strong> Bash. </p>
    <h3>Editor:</h3>
    <ul>
      <li>VIM</li>
      <li>Nano:</li>
      <li>Emacs</li>
    </ul>
    <p><strong>Recommendation:</strong> Bash. </p>
  </section>

  <section>
    <h2>Step 4: Version Control</h2>
    <p>Now we need to decicde on the version control hotsing platform. </p>
    <h3>Hosting:</h3>
    <ul>
      <li>Github</li>
      <li>Gitlab</li>
      <li>Gitlab</li>
      <li>Perforce</li>
    </ul>
  </section>

# TODO: add the docker stuff here

  <section>
    <h2>üê≥ Step 5: Containers & Orchestration</h2>
    <p>Every modern DevOps shop uses containers.</p>
    <h3>Learn:</h3>
    <ul>
      <li>Docker: Build, run, and manage containers</li>
      <li>Kubernetes: Deploy apps, scale them, and manage them in clusters</li>
      <li>Helm, Kustomize, or ArgoCD for GitOps are bonuses</li>
    </ul>
    <p><strong>Real-world tip:</strong> Consultants often help teams "migrate to Kubernetes" or "build scalable infra"‚Äîthis is your leverage point.</p>
  </section>


   <section>
    <h2>Step 4: CI/CD Basics</h2>
    <p>This is where DevOps gets serious. Start building and shipping software automatically.</p>
    <h3>Thi:</h3>
    <ul>
      <li>Understand the CI/CD lifecycle</li>
      <li>Learn tools like: GitHub Actions, Jenkins, or GitLab CI</li>
      <li>Docker + Docker Compose for containerized builds</li>
      <li>Testing and build pipelines</li>
    </ul>
    <p><strong>Consultant Tip:</strong> Companies pay consultants to shorten release cycles and reduce risk. Master CI/CD design.</p>
  </section>

  <section>
    <h2>‚òÅÔ∏è Step 4: Infrastructure & Cloud</h2>
    <p>Get hands-on with real infrastructure‚Äîon-prem and cloud.</p>
    <h3>Roadmap.sh + Consultant Focus:</h3>
    <ul>
      <li>Cloud Platforms: Start with AWS (most in-demand), then look at GCP or Azure.</li>
      <li>Infrastructure as Code (IaC): Terraform (a must for consultants), Ansible (for provisioning/config)</li>
      <li>Key Concepts: VPCs, IAM roles, S3, EC2, load balancers</li>
      <li>Creating repeatable environments with Terraform</li>
    </ul>
  </section>

  <section>
    <h2>üìä Step 6: Monitoring & Logging</h2>
    <p>A system isn't complete if you can't observe it.</p>
    <h3>Learn tools like:</h3>
    <ul>
      <li>Prometheus + Grafana (monitoring/alerting)</li>
      <li>ELK Stack or Loki (logging)</li>
      <li>Understand how to set up health checks, alert rules, SLOs/SLIs</li>
    </ul>
    <p><strong>Consulting use:</strong> Clients want faster incident detection and proactive performance tuning.</p>
  </section>

  <section>
    <h2>üß™ Step 7: Security, Secrets, & Compliance</h2>
    <p>DevOps consultants must think beyond tech‚Äîthey secure systems too.</p>
    <h3>Key Tools/Concepts:</h3>
    <ul>
      <li>HashiCorp Vault (for secrets)</li>
      <li>Cloud IAM</li>
      <li>Image scanning and supply chain security</li>
    </ul>
  </section>

  <section>
    <h2>üß† Step 8: Soft Skills & Business Thinking</h2>
    <p>What separates engineers from consultants is how they:</p>
    <ul>
      <li>Communicate with stakeholders</li>
      <li>Translate tech to business goals</li>
      <li>Handle ambiguity</li>
      <li>Create documentation and repeatable processes</li>
    </ul>
    <h3>Learn to:</h3>
    <ul>
      <li>Conduct discovery sessions</li>
      <li>Write proposals/SOWs</li>
      <li>Educate client teams</li>
      <li>Speak the language of ROI and velocity</li>
    </ul>
  </section>

</BaseLayout>
