---
import BaseLayout from '../layouts/BaseLayout.astro';

interface Post {
  frontmatter: {
    title: string;
    description: string;
    pubDate: string | Date;
    tags?: string[];
  };
  url: string;
}

// Load all blog posts
const postImports = import.meta.glob('../content/blog/*.md');
const posts: Post[] = [];

for (const path in postImports) {
  const mod = await postImports[path]() as any;
  posts.push({
    frontmatter: mod.frontmatter,
    url: path.replace('../content/blog', '/blog').replace('.md', ''),
  });
}

// Normalize pubDate to Date type
posts.forEach((post) => {
  if (typeof post.frontmatter.pubDate === 'string') {
    post.frontmatter.pubDate = new Date(post.frontmatter.pubDate);
  }
});

// Group posts by tags
const postsByTag: Record<string, Post[]> = {};
const untagged: Post[] = [];

posts.forEach((post) => {
  const tags = post.frontmatter.tags ?? [];
  if (tags.length === 0) {
    untagged.push(post);
  } else {
    for (const tag of tags) {
      if (!postsByTag[tag]) postsByTag[tag] = [];
      postsByTag[tag].push(post);
    }
  }
});

// Sort tags alphabetically
const sortedTags = Object.keys(postsByTag).sort((a, b) => a.localeCompare(b));

// Sort posts within each tag by date (newest first)
for (const tag in postsByTag) {
  postsByTag[tag].sort((a, b) =>
    (b.frontmatter.pubDate as Date).getTime() - (a.frontmatter.pubDate as Date).getTime()
  );
}

// Sort untagged posts by date descending
untagged.sort((a, b) =>
  (b.frontmatter.pubDate as Date).getTime() - (a.frontmatter.pubDate as Date).getTime()
);

// Sort all posts by date descending
const allPosts = [...posts].sort(
  (a, b) =>
    (b.frontmatter.pubDate as Date).getTime() - (a.frontmatter.pubDate as Date).getTime()
);
---

<BaseLayout>
  <h1>Blog Posts</h1>

  <nav class="tabs" role="tablist" aria-label="Filter posts by tag">
    <button role="tab" aria-selected="true" data-tag="all" class="active">All</button>
    {sortedTags.map((tag) => (
      <button role="tab" aria-selected="false" data-tag={tag}>{tag}</button>
    ))}
    {untagged.length > 0 && <button role="tab" aria-selected="false" data-tag="untagged">Untagged</button>}
  </nav>

  <section id="posts-list" role="tabpanel">
    <ul>
      {allPosts.map((post) => (
        <li data-tags={post.frontmatter.tags?.join(',') ?? ''}>
          {(post.frontmatter.pubDate as Date).toDateString()} â€“ 
          <a href={post.url}>{post.frontmatter.title}</a>
        </li>
      ))}
    </ul>
  </section>

  <script>
    if (typeof window !== 'undefined') {
      window.addEventListener('DOMContentLoaded', () => {
        // Tell TS postsList is not null (non-null assertion)
        const postsList = document.getElementById('posts-list')!;
        const buttons = document.querySelectorAll('.tabs button');

        // Cast postsList.querySelectorAll('li') to an array of HTMLLIElement
        const allPosts = Array.from(postsList.querySelectorAll('li')) as HTMLLIElement[];

        function renderPosts(posts: HTMLLIElement[]) {
          postsList.innerHTML = '';
          if (posts.length === 0) {
            postsList.innerHTML = '<p>No posts found.</p>';
            return;
          }
          const ul = document.createElement('ul');
          posts.forEach((li) => ul.appendChild(li));
          postsList.appendChild(ul);
        }

        buttons.forEach((button) => {
          button.addEventListener('click', () => {
            // Remove active from all buttons
            buttons.forEach((btn) => {
              btn.classList.remove('active');
              btn.setAttribute('aria-selected', 'false');
            });

            // Add active to clicked button
            button.classList.add('active');
            button.setAttribute('aria-selected', 'true');

            // TS: Cast button to HTMLElement & use dataset safely
            const tag = (button as HTMLElement).dataset.tag;

            if (tag === 'all') {
              renderPosts(allPosts);
            } else if (tag === 'untagged') {
              renderPosts(allPosts.filter(li => !li.dataset.tags || li.dataset.tags.trim() === ''));
            } else {
              renderPosts(allPosts.filter(li => {
                const tags = li.dataset.tags ? li.dataset.tags.split(',') : [];
                return tags.includes(tag!);
              }));
            }
          });
        });
      });
    }
  </script>

  <style>
    .tabs {
      margin: 1rem 0;
    }
    .tabs button {
      margin-right: 0.5rem;
      padding: 0.5rem 1rem;
      cursor: pointer;
      background: none;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 1rem;
      transition: background-color 0.2s ease;
    }
    .tabs button.active,
    .tabs button[aria-selected="true"] {
      font-weight: bold;
      border-color: #333;
      background-color: #eee;
    }
    .tabs button:hover:not(.active) {
      background-color: #f0f0f0;
    }
    ul {
      list-style: none;
      padding-left: 0;
    }
    li {
      margin-bottom: 0.5rem;
    }
  </style>
</BaseLayout>
